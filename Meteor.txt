public class Meteor
{
    public int X { get; set; }
    public int Y { get; set; }
    public int Size { get; private set; } // Kích thước thiên thạch
    private const int FallSpeed = 1; // Tốc độ rơi cố định cho tất cả các thiên thạch

    public Meteor(int x, int y, int size)
    {
        X = x;
        Y = y;
        Size = size;
    }

    public void UpdatePosition()
    {
        Y += FallSpeed; // Rơi xuống với tốc độ cố định
    }

    public string GetBlockChar()
    {
        return new string('█', Size); // Trả về chuỗi đại diện cho thiên thạch
    }
}

public class MeteorSimulation
{
    private const int ScreenWidth = 115;
    private const int ScreenHeight = 30;
    private Random random = new Random();
    private List<Meteor> meteors = new List<Meteor>();
    private int excludedColumn;
    private int timeSinceLastChange = 0;
    private const int ChangeInterval = 3000;

    private List<int> meteorSizes = new List<int> { 2, 3, 4, 5 };

    public MeteorSimulation()
    {
        // No player initialization
    }

    public void Run()
    {
        excludedColumn = random.Next(0, ScreenWidth - 5);
        int meteorSpawnRate = 4;
        int spawnCounter = 0;

        while (true) // Infinite loop without player lives
        {
            timeSinceLastChange += 100;
            if (timeSinceLastChange >= ChangeInterval)
            {
                excludedColumn = random.Next(0, ScreenWidth - 5);
                timeSinceLastChange = 0;
            }

            spawnCounter++;
            if (spawnCounter >= meteorSpawnRate)
            {
                spawnCounter = 0;
                int meteorColumn = random.Next(0, ScreenWidth - 5);
                if (meteorColumn != excludedColumn)
                {
                    int size = meteorSizes[random.Next(meteorSizes.Count)];
                    meteors.Add(new Meteor(meteorColumn, 0, size));
                }
            }

            // Update meteors
            foreach (var meteor in meteors.ToList())
            {
                meteor.UpdatePosition();

                if (meteor.Y >= ScreenHeight)
                {
                    meteors.Remove(meteor); // Remove off-screen meteors
                }
            }

            // Clear console and draw everything
            Console.Clear();
            foreach (var meteor in meteors)
            {
                for (int i = 0; i < meteor.Size; i++)
                {
                    Console.SetCursorPosition(meteor.X + i, meteor.Y);
                    Console.Write('█');
                }
            }

            // Control speed
            Thread.Sleep(50);
        }
    }
}
